%YAML 1.2
---
name: XPX
file_extensions: [xpx, phc]
scope: text.xpx
version: 2
extends: Packages/HTML/HTML.sublime-syntax

###############################################################################

variables:
  block_tag_name_xpx: |-
    (?ix:
      cond|csv|scope|setarea|sql|while|xpath|xproc
    ){{tag_name_break}}

  inline_tag_name_xpx: |-
    (?ix:
      cookie|connect|create|debug|dir|else|file|get|http|include|mail|pdf|pict|set|system|wait
    ){{tag_name_break}}

  noparse_tag_name_xpx: |-
    (?ix:
      noparse
    ){{tag_name_break}}

###############################################################################

contexts:

  main:
    - match: ""
      # La page xpx est avant tout analysé en HTML (avec CSS et JS) classique.
      push: Packages/HTML/HTML.sublime-syntax
      with_prototype:
        # Suspendre l'analyse syntaxique XPX durant un commentaire HTML.
        - include: tag-xpx-comment
        # Ajouter ensuite les régions XPX en sus des régions HTML.
        - include: tag-xpx
        # Permettre la reconnaissance des variables XPX dans le HTML.
        - match: '\$'
          scope: punctuation.definition.variable.xpx
          push: variable-xpx

###[ NO XPX IN COMMENT TAGS ]###############################################

  tag-xpx-comment:
    - match: <!--
      scope: punctuation.definition.comment.begin.html
      push:
        - meta_scope: comment.block.html
        - match: '-->'
          scope: punctuation.definition.comment.end.html
          pop: true

###[ XPX TAGS ]##############################################################

  tag-xpx:
    - include: tag-xpx-function
    - match: (</?)({{block_tag_name_xpx}})
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.block.xpx
      push:
        - clear_scopes: 1 # Effacement du scope text.html.basic (Effacement du dernier scope défini avant cette ligne).
        - meta_scope: meta.tag.xpx meta.tag.block.xpx
        - include: tag-end
        - include: tag-xpx-attributes
    - match: (</?)({{inline_tag_name_xpx}})
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.inline.xpx
      push:
        - clear_scopes: 1 # Effacement du scope text.html.basic (Effacement du dernier scope défini avant cette ligne).
        - meta_scope: meta.tag.xpx meta.tag.inline.xpx
        - include: tag-end-maybe-self-closing
        - include: tag-xpx-attributes
    - match: (</?)({{noparse_tag_name_xpx}})
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.block.xpx
      push:
        - clear_scopes: 1 # Effacement du scope text.html.basic (Effacement du dernier scope défini avant cette ligne).
        - meta_scope: meta.tag.xpx meta.tag.noparse.xpx
        - match: (?i)(</)(noparse)(>)
          captures:
            1: punctuation.definition.tag.begin.html
            2: entity.name.tag.noparse.xpx
            3: punctuation.definition.tag.end.html
          pop: true
        - match: '>'
          scope: punctuation.definition.tag.end.html
          push:
            - include: 'scope:text.html.basic'
          with_prototype:
            - match: (?i)(</)(noparse)(>)
              captures:
                1: punctuation.definition.tag.begin.html
                2: entity.name.tag.block.xpx
                3: punctuation.definition.tag.end.html
              push:
                - clear_scopes: 2 # Effacement des scopes meta.tag.xpx et meta.tag.noparse.xpx (Effacement des deux derniers scopes définis avant cette ligne).
                - include: 'scope:text.html.basic'
                - include: 'scope:text.xpx'

###[ XPX ATTRIBUTES ]#############################################################

  tag-xpx-attributes:
    - include: tag-xpx-query-attribute
    - include: tag-xpx-other-attribute
    - include: tag-generic-attribute

###[ QUERY ATTRIBUTE ]########################################################

  tag-xpx-query-attribute:
    - match: (?i:query){{attribute_name_break}}
      scope: entity.other.attribute-name.query.xpx
      push:
        - tag-xpx-query-attribute-meta
        - tag-xpx-query-attribute-assignment

  tag-xpx-query-attribute-meta:
    - meta_include_prototype: false
    - meta_scope: meta.attribute-with-value.xpx meta.attribute-with-value.query.xpx
    - include: immediately-pop

  tag-xpx-query-attribute-assignment:
    - match: =
      scope: punctuation.separator.key-value.html
      set: tag-xpx-query-attribute-value
    - include: else-pop

  tag-xpx-query-attribute-value:
    - match: \"
      scope: punctuation.definition.string.begin.xpx
      push: Packages/SQL/SQL.sublime-syntax
      with_prototype:
        # Eliminer tous les guillements échappés.
        - match: '\\"'
        - match: '"'
          scope: punctuation.definition.string.end.xpx
          pop: true
        - match: '\$'
          scope: punctuation.definition.variable.xpx
          push: variable-xpx
    - match: ''
      pop: true

###[ OTHER XPX ATTRIBUTES ]########################################################

  # Définir une région (scope) d'un attribut XPX.
  tag-xpx-other-attribute:
    # (?i) case insensitive
    # Tous sauf query (sql).
    - match: '\s+\b((?i)(align|addpage|base|bgcolor|bit|bitoff|biton|border|by|calc|cc|cci|charset|chartohexa|close|color|connect|content|copy|create|datetime|decode64|decrypt|delete|dest|dir|domain|encode64|encrypt|eol|exec|exist|expr|file|fill|font|format|frame|from|get|geth|getw|getx|gety|gettext|global|hash|headers|height|hex2bin|hexatochar|hmac|href|html2text|id|info|join|keycode|lang|leading|len|line|list|local|lowcase|ltrim|maxrows|mode|model|money|msg|name|noaccent|open|option|padding|pagesize|pass|path|port|position|rand|read|rect|replace|reply|return|rotate|round|rtrim|samesite|select|sep|server|session|size|smtp|socket|srcparam|start|strcode|strdecode|strescape|style|subject|svg2pdf|text|timeout|transaction|trim|ttl|to|token|transparency|type|upcase|urlcode|value|width|write|x|xmlcode|xpx|y)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.xpx
        2: entity.other.attribute-name.xpx
        3: punctuation.separator.key-value.html
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.xpx
          set:
            # Eliminer tous les guillements échappés.
            - match: '\\"'
            - meta_scope: meta.attribute-with-value.xpx
            - meta_content_scope: entity.other.attribute-value.xpx
            - match: '"'
              scope: punctuation.definition.string.end.xpx
              pop: true
            - match: '\$'
              scope: punctuation.definition.variable.xpx
              push: variable-xpx
        - match: ''
          pop: true

###[ XPX TAG FUNCTION ]#############################################

  tag-xpx-function:
    # Détection début de la balise.
    - match: '(<)((?i:function))'
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.block.xpx
      push:
        - clear_scopes: 1 # Effacement du scope text.html.basic (Effacement du dernier scope défini avant cette ligne).
        # Scope global valable depuis le premier caractère ponctuation balise.
        - meta_scope: meta.tag.xpx meta.tag.function.xpx
        # Interprétation des attributs du tag.
        - include: tag-xpx-function-name-attribute
        - include: tag-xpx-function-exec-attribute
        - include: tag-xpx-function-other-attribute
        # Détection de la fin de la balise bloc.
        - include: tag-xpx-function-end
        # Détection de fin de balise inline.
        - include: tag-xpx-function-end-inline

  tag-xpx-function-end:
    # Détection de la fin du inline potentiel.
    - match: '(>)'
      captures:
        1: punctuation.definition.tag.end.html
      embed: scope:text.xpx
      escape: '(</)((?i:function))(>)'
      escape_captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.block.xpx
        3: punctuation.definition.tag.end.html
      pop: true

  tag-xpx-function-end-inline:
    # Détection de la fin du inline potentiel.
    - match: '(/>)'
      captures:
        1: punctuation.definition.tag.end.html
      pop: true

###[ XPX FUNCTION ATTRIBUTE NAME ]########################################################

  # Définir une région (scope) d'un attribut XPX (tous sauf query).
  tag-xpx-function-name-attribute:
    # (?i) case insensitive
    - match: '\s+\b((?i)(name)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.xpx
        2: entity.other.attribute-name.xpx
        3: punctuation.separator.key-value.html
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.xpx
          set:
            # Eliminer tous les guillements échappés.
            - match: '\\"'
            - meta_scope: meta.attribute-with-value.xpx
            - meta_content_scope: meta.function-call entity.name.function.xpx
            - match: '"'
              scope: punctuation.definition.string.end.xpx
              pop: true
            - match: '\$'
              scope: punctuation.definition.variable.xpx
              push: variable-xpx
        - match: ''
          pop: true

###[ XPX FUNCTION ATTRIBUTE EXEC ]########################################################

  # Définir une région (scope) d'un attribut XPX (tous sauf query).
  tag-xpx-function-exec-attribute:
    # (?i) case insensitive
    - match: '\s+\b((?i)(exec)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.xpx
        2: entity.other.attribute-name.xpx
        3: punctuation.separator.key-value.html
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.xpx
          set:
            # Eliminer tous les guillements échappés.
            - match: '\\"'
            - meta_scope: meta.attribute-with-value.xpx
            - meta_content_scope: variable.function.xpx
            - match: '"'
              scope: punctuation.definition.string.end.xpx
              pop: true
            - match: '\$'
              scope: punctuation.definition.variable.xpx
              push: variable-xpx
        - match: ''
          pop: true

###[ XPX FUNCTION ATTRIBUTE NAMESPACE ]########################################################

  # Définir une région (scope) d'un attribut XPX (tous sauf query).
  tag-xpx-function-namespace-attribute:
    # (?i) case insensitive
    - match: '\s+\b((?i)(namespace)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.xpx
        2: entity.other.attribute-name.xpx
        3: punctuation.separator.key-value.html
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.xpx
          set:
            # Eliminer tous les guillements échappés.
            - match: '\\"'
            - meta_scope: meta.attribute-with-value.xpx
            - meta_content_scope: entity.name.namespace.xpx
            - match: '"'
              scope: punctuation.definition.string.end.xpx
              pop: true
            - match: '\$'
              scope: punctuation.definition.variable.xpx
              push: variable-xpx
        - match: ''
          pop: true

###[ XPX FUNCTION ATTRIBUTE ANY ]########################################################

  # Région des arguments function (définies par dev.) différent des propriétés imposées par langage : name et exec.
  tag-xpx-function-other-attribute:
    # Pour la balise function : n'importe quel nom de propriété.
    - match: '\s+\b(([a-zA-Z0-9_]*)\b\s*(=)\s*)'
      captures:
        1: meta.attribute-with-value.xpx
        2: entity.other.attribute-name.xpx
        3: punctuation.separator.key-value.html
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.xpx
          set:
            # Eliminer tous les guillements échappés.
            - match: '\\"'
            - meta_scope: meta.attribute-with-value.xpx
            - meta_content_scope: variable.parameter.xpx
            - match: '"'
              scope: punctuation.definition.string.end.xpx
              pop: true
            - match: '\$'
              scope: punctuation.definition.variable.xpx
              push: variable-xpx
        - match: ''
          pop: true

###[ SCRIPT JAVASCRIPT ]########################################################

  xpx-script-tag:
    - match: (<)((?i:script)){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.script.html
      push: xpx-script-javascript
    - match: (</)((?i:script){{tag_name_break}})
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.script.html
      push: xpx-script-close-tag-content

  xpx-script-close-tag-content:
    - meta_scope: meta.tag.script.end.html
    - include: tag-end

  xpx-script-javascript:
    - meta_scope: meta.tag.script.begin.html
    - include: script-common
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set: xpx-script-javascript-content

  xpx-script-javascript-content:
    - meta_include_prototype: false
    - match: '{{script_content_begin}}'
      captures:
        1: comment.block.html punctuation.definition.comment.begin.html
      pop: 1  # make sure to match only once
      embed: scope:source.js
      embed_scope: source.js.embedded.html
      escape: '{{script_content_end}}'
      escape_captures:
        1: source.js.embedded.html
        2: comment.block.html punctuation.definition.comment.end.html

###[ XPX VARIABLES ]########################################################

  # Définir une région (scope) variable XPX et variable incluse.
  variable-xpx:
    - meta_scope: variable.other.xpx
    - match: '\[[a-zA-Z0-9_]*\]'
      scope: variable.other.xpx.embedded
    - match: '\$'
      scope: punctuation.definition.variable.xpx
      pop: true
